{"version":3,"sources":["component/maskStore.js","component/mask.js","App.js","serviceWorker.js","index.js"],"names":["MaskStore","name","addr","idx","type","stat","useState","text","stock","setStuck","useEffect","stockStat","className","Mask","mask","setMast","setError","isLoading","setLoading","callUrl","a","axios","get","stores","data","console","log","document","title","style","color","position","left","top","transform","map","ele","key","remain_stat","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSA+DeA,MA1Df,YAAmD,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KAAO,EAClBC,mBAAS,CACjCC,KAAO,GACPF,KAAO,KAHmC,mBACtCG,EADsC,KAC/BC,EAD+B,KAqC9C,OAHAC,qBAAU,YA5BV,WAEI,OAAOL,GACH,IAAK,SAGDI,EAAS,CAACF,KAFN,kCAEgBF,KADhB,2BAEJ,MACJ,IAAK,OAGDI,EAAS,CAACF,KAFN,kCAEgBF,KADhB,gDAEJ,MACJ,IAAK,MAGDI,EAAS,CAACF,KAFN,4DAEgBF,KADhB,+CAEJ,MACJ,IAAK,QAGDI,EAAS,CAACF,KAFN,+CAEgBF,KADhB,yBAEJ,MACJ,QACAI,EAAS,CAACF,KAAO,2DAAeF,KAAO,kBAK3CM,KACF,IAEE,6BAASC,UAAS,qBAAgBT,EAAhB,gBAA2BC,EAA3B,YAAmCC,IACjD,yBAAKO,UAAU,OACX,4BAAKX,GACL,4BAAKC,GACL,yBAAKU,UAAU,QACX,2BAAIJ,EAAMD,MACV,8BAAOC,EAAMH,U,MCMlBQ,MAjDf,WAAiB,IAAD,EACcP,mBAAS,IADvB,mBACJQ,EADI,KACEC,EADF,OAEeT,mBAAS,IAFxB,mBAEGU,GAFH,aAGsBV,oBAAS,GAH/B,mBAGJW,EAHI,KAGOC,EAHP,KAINC,EAAO,uCAAG,8BAAAC,EAAA,+EAE4BC,IAAMC,IAAI,+JAFtC,gBAESC,EAFT,EAEAC,KAASD,OACjBR,EAAQQ,GAHA,gDAKRP,EAAS,sDACTS,QAAQC,IAAI,SANJ,yBAQRR,GAAW,GARH,4EAAH,qDAyBb,OAdAR,qBAAU,WACNS,MACF,IAQFT,qBAAU,WACNiB,SAASC,MAAQ,wDAIjB,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,SACTK,EACE,yBAAKY,MAfA,CACjBC,MAAQ,OACRC,SAAW,WACXC,KAAO,MACPC,IAAM,MACNC,UAAS,0BAUG,cACDpB,EAAKqB,KAAI,SAACC,EAAKjC,GAAN,OACR,kBAAC,EAAD,CACAF,KAAMmC,EAAInC,KACVC,KAAMkC,EAAIlC,KACVC,IAAKA,EACLkC,IAAKlC,EACLE,KAAM+B,EAAIE,YACVlC,KAAMgC,EAAIhC,a,MCnCfmC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,Q,MCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.771c923d.chunk.js","sourcesContent":["import React, { useState, useEffect } from'react';\nimport PropTypes from \"prop-types\";\n\n\n\nfunction MaskStore({name, addr, idx, type, stat}) {\n    const [ stock, setStuck ] = useState({\n        text : \"\",\n        stat : \"\"\n    })\n\n    function stockStat() {\n        let x, y;\n        switch(stat) {\n            case \"plenty\" :\n                x = \"충분합니다.\";\n                y = \"100개 이상\";\n                setStuck({text : x, stat : y})\n                break;\n            case \"some\" : \n                x = \"보통입니다.\";\n                y = \"30개 이상 100개미만\";\n                setStuck({text : x, stat : y})\n                break;\n            case \"few\" :\n                x = \"얼마 남지 않았습니다.\";\n                y = \"2개 이상 30개 미만\";\n                setStuck({text : x, stat : y})\n                break;\n            case \"empty\" : \n                x = \"남지 않았습니다.\";\n                y = \"1개 이하\";\n                setStuck({text : x, stat : y})\n                break;\n            default :\n            setStuck({text : \"확인되지 않았습니다.\", stat : \"오류\"})\n        }\n    }\n\n    useEffect(()=>{\n        stockStat();\n    },[])\n    return (\n        <article className={`store store${idx} type${type} ${stat}`}>\n            <div className=\"box\">\n                <h2>{name}</h2>\n                <h3>{addr}</h3>\n                <div className=\"stat\">\n                    <p>{stock.text}</p>\n                    <span>{stock.stat}</span>\n                </div>\n            </div>\n        </article>\n    )\n}\n\nMaskStore.propTypes = {\n    name: PropTypes.string.isRequired,\n    addr: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    stat: PropTypes.string.isRequired\n}\n\nexport default MaskStore;","import React, { useState, useEffect } from'react';\nimport axios from 'axios';\nimport MaskStore from \"./maskStore\";\nimport \"./css/mask.css\";\n\n\nfunction Mask() {\n    const [ mask, setMast ] = useState([]);\n    const [ error, setError] = useState(\"\");\n    const [ isLoading, setLoading ] = useState(true);\n    const callUrl = async() => {\n        try {\n            const { data : { stores } } = await axios.get(\"https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByAddr/json?address=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C%20%EB%A7%88%ED%8F%AC%EA%B5%AC\");\n            setMast(stores)\n        } catch {\n            setError(\"데이터가 없습니다.\")\n            console.log(\"error\");\n        } finally {\n            setLoading(false);\n        }\n    }\n    useEffect(()=>{\n        callUrl();\n    },[])\n    const loadingStyle = {\n        color : \"#fff\",\n        position : 'absolute',\n        left : '50%',\n        top : '50%',\n        transform : `translate(-50%, -50%)`\n    }\n    useEffect(()=> {\n        document.title = '마포구 마스크 현황';\n    })\n\n    return (\n        <div className=\"wrap\">\n            <div className=\"inner\">\n                { isLoading ? (\n                    <div style={loadingStyle}>Loading...</div>\n                ):(mask.map((ele, idx)=>(\n                    <MaskStore \n                    name={ele.name}\n                    addr={ele.addr}\n                    idx={idx}\n                    key={idx}\n                    stat={ele.remain_stat}\n                    type={ele.type}\n                    />\n                ))) }\n            </div>\n        </div>\n    )\n}\n\nexport default Mask;","import React from 'react';\nimport Mask from './component/mask';\nimport './css/app.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Mask />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}